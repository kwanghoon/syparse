%% -----------------------------------------------------------------------------
%%
%% syparse_generator_reasoning.txt: Solidity - reasons for the sequence of code generation.
%%
%% Copyright (c) 2017 Walter Weinmann.  All Rights Reserved.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -----------------------------------------------------------------------------

================================================================================
Level 01
--------------------------------------------------------------------------------

BooleanLiteral = 'TRUE' | 'FALSE'

==> Expression                          == Expression = ... PrimaryExpression ...
==> ExpressionStatement                 == ExpressionStatement = Expression
==> PrimaryExpression                   == PrimaryExpression = ... BooleanLiteral ,,,
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

Break = 'BREAK'

==> Statement                           == Statement = ... Break ';' ...

Byte = 'BYTE' | 'BYTES' | ... | 'BYTES32'

==> ElementaryTypeName                  == ElementaryTypeName = ... Byte ...
==> TypeName                            == TypeName = ... ElementaryTypeName ...

Continue = 'CONTINUE'

==> Statement                           == Statement = ... Continue ';' ...

DecimalNumber = [0-9]+

HexLiteral = 'HEX' ('"' ([0-9a-fA-F][0-9a-fA-F])* '"' | "'" ([0-9a-fA-F][0-9a-fA-F])* "'")

==> AssemblyItem                        == AssemblyItem = ... HexLiteral ...
==> Expression                          == Expression = ... PrimaryExpression ...
==> ExpressionStatement                 == ExpressionStatement = Expression
==> PrimaryExpression                   == PrimaryExpression = ... HexLiteral ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

HexNumber = '0x' [0-9a-fA-F]+

Identifier = [a-zA-Z_$] [a-zA-Z_$0-9]*

==> AssemblyItem                        == AssemblyItem = Identifier
==> EnumValue                           == EnumValue = Identifier

Int = 'INT' | 'INT8' | ... | 'INT256'

==> ElementaryTypeName                  == ElementaryTypeName = ... Int ...
==> TypeName                            == TypeName = ... ElementaryTypeName ...

NumberUnit = 'WEI' | 'SZABO' | 'FINNEY' | 'ETHER'
             | 'SECONDS' | 'MINUTES' | 'HOURS' | 'DAYS' | 'WEEKS' | 'YEARS'

PlaceholderStatement = '_'

==> Statement                           == Statement = ... PlaceholderStatement ';' ...

PRAGMA_DIRECTIVE = ([^;]+;)

StateMutability = 'PURE' | 'CONSTANT' | 'VIEW' | 'PAYABLE'

StorageLocation = 'MEMORY' | 'STORAGE'

StringLiteral = '"' ([^"\r\n\\] | '\\' .)* '"'
==> AssemblyItem                        == AssemblyItem = ... StringLiteral ...
==> Expression                          == Expression = ... PrimaryExpression ...
==> ExpressionStatement                 == ExpressionStatement = Expression
==> PrimaryExpression                   == PrimaryExpression = ... StringLiteral ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

Throw = 'THROW'

==> Statement                           == Statement = ... Throw ';' ...

Uint = 'UINT' | 'UINT8' | ... | 'UINT256'

==> ElementaryTypeName                  == ElementaryTypeName = ... Uint ...
==> TypeName                            == TypeName = ... ElementaryTypeName ...

================================================================================
Level 02
--------------------------------------------------------------------------------

AssemblyLabel = Identifier ':'

==> AssemblyItem                        == AssemblyItem = ... AssemblyLabel ...

EnumDefinition = 'ENUM' Identifier '{' EnumValue? (',' EnumValue)* '}'
==> ContractPart                        == 

Fixed = 'FIXED' | ( 'FIXED' DecimalNumber 'x' DecimalNumber )

==> ElementaryTypeName                  == ElementaryTypeName = ... Fixed ...
==> TypeName                            == TypeName = ... ElementaryTypeName ...

IdentifierList = '(' ( Identifier? ',' )* Identifier? ')'

ImportDirective = 'IMPORT' StringLiteral ('AS' Identifier)? ';'
                  | 'IMPORT' ('*' | Identifier) ('AS' Identifier)? 'FROM' StringLiteral ';'
                  | 'IMPORT' '{' Identifier ('AS' Identifier)? ( ',' Identifier ('AS' Identifier)? )* '}' 'FROM' StringLiteral ';'

NumberLiteral = ( HexNumber | DecimalNumber ) (' ' NumberUnit)?

==> AssemblyItem                        == AssemblyItem = ... NumberLiteral ...
==> Expression                          == Expression = ... PrimaryExpression ...
==> ExpressionStatement                 == ExpressionStatement = Expression
==> PrimaryExpression                   == PrimaryExpression = ... NumberLiteral ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

Ufixed = 'UFIXED' | ( 'UFIXED' DecimalNumber 'x' DecimalNumber )

==> ElementaryTypeName                  == ElementaryTypeName = ... | Ufixed
==> TypeName                            == TypeName = ... ElementaryTypeName ...

UserDefinedTypeName = Identifier ( '.' Identifier )*

==> TypeName                            == TypeName = ... UserDefinedTypeName ... 

================================================================================
Level 03
--------------------------------------------------------------------------------

ElementaryTypeName = 'ADDRESS' 
                   | 'BOOL' 
                   | 'STRING' 
                   | 'VAR'
==                    | Int 
==                    | Uint 
==                    | Byte 
==                    | Fixed 
==                    | Ufixed

==> TypeName                            == TypeName = ... ElementaryTypeName ... 

PragmaDirective = 'PRAGMA' Identifier ([^;]+) ';'

================================================================================
Level 04
--------------------------------------------------------------------------------

Expression = Expression ('++' | '--')
             | NewExpression
             | IndexAccess
             | MemberAccess
             | FunctionCall
             | '(' Expression ')'
             | ('!' | '~' | 'delete' | '++' | '--' | '+' | '-') Expression
             | Expression '**' Expression
             | Expression ('*' | '/' | '%') Expression
             | Expression ('+' | '-') Expression
             | Expression ('<<' | '>>') Expression
             | Expression '&' Expression
             | Expression '^' Expression
             | Expression '|' Expression
             | Expression ('<' | '>' | '<=' | '>=') Expression
             | Expression ('==' | '!=') Expression
             | Expression '&&' Expression
             | Expression '||' Expression
             | Expression '?' Expression ':' Expression
             | Expression ('=' | '|=' | '^=' | '&=' | '<<=' | '>>=' | '+=' | '-=' | '*=' | '/=' | '%=') Expression
             | PrimaryExpression

==> ExpressionStatement                 == ExpressionStatement = Expression
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

================================================================================
Level 05
--------------------------------------------------------------------------------

ArrayTypeName = TypeName '[' Expression? ']'

==> TypeName                            == TypeName = ... ArrayTypeName ... 

ExpressionList = Expression ( ',' Expression )*

==> FunctionCallArguments               == FunctionCallArguments = ... ExpressionList? ...

IndexAccess = Expression '[' Expression? ']'

==> Expression                          == Expression = ... IndexAccess ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

IndexedParameterList = '(' ( TypeName 'INDEXED'? Identifier? (',' TypeName 'INDEXED'? Identifier?)* )? ')'

InheritanceSpecifier = UserDefinedTypeName ( '(' Expression ( ',' Expression )* ')' )?

Mapping = 'MAPPING' '(' ElementaryTypeName '=>' TypeName ')'

==> TypeName                            == TypeName = ... Mapping ... 

MemberAccess = Expression '.' Identifier

==> Expression                          == Expression = ... MemberAccess ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

NameValueList = Identifier ':' Expression ( ',' Identifier ':' Expression )*

NewExpression = 'NEW' TypeName

==> Expression                          == Expression = ... NewExpression ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

/* reduce/reduce ParameterList ::=        '(' ( TypeName            Identifier? (',' TypeName            Identifier?)* )? ')' */
ParameterList =        '(' ( TypeName            Identifier? (',' TypeName            Identifier?)* )? ')'

Return = 'RETURN' Expression?

==> Statement                           == Statement = ... Return ';' ...

StateVariableDeclaration = TypeName ( 'PUBLIC' | 'INTERNAL' | 'PRIVATE' | 'CONSTANT' )? Identifier ('=' Expression)? ';'

==> ContractPart                        == ContractPart = ... StateVariableDeclaration ...

TupleExpression = '(' ( Expression ( ',' Expression )*  )? ')'
                  | '[' ( Expression ( ',' Expression )*  )? ']'

==> Expression                          == Expression = ... PrimaryExpression ...
==> ExpressionStatement                 == ExpressionStatement = Expression
==> PrimaryExpression                   == PrimaryExpression = ... TupleExpression ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

/* reduce/reduce TypeNameList =         '(' ( TypeName (',' TypeName )* )? ')' */
TypeNameList =         '(' ( TypeName (',' TypeName )* ) ')'

UsingForDeclaration = 'USING' Identifier 'FOR' ('*' | TypeName) ';'

==> ContractPart                        == ContractPart = ... UsingForDeclaration ...

VariableDeclaration = TypeName StorageLocation? Identifier

================================================================================
Level 06
--------------------------------------------------------------------------------

EventDefinition = 'EVENT' Identifier IndexedParameterList 'ANONYMOUS'? ';'

==> ContractPart                        == ContractPart = ... EventDefinition ...

FunctionCallArguments = '{' NameValueList? '}'
                        | ExpressionList?

FunctionTypeName = 'FUNCTION' TypeNameList ( 'INTERNAL' | 'EXTERNAL' | StateMutability )*
                     ( 'RETURNS' TypeNameList )?

==> TypeName                            == TypeName = ... FunctionTypeName ... 

ModifierInvocation = Identifier ( '(' ExpressionList? ')' )?

StructDefinition = 'STRUCT' Identifier '{'
                     ( VariableDeclaration ';' (VariableDeclaration ';')* )? '}'

==> ContractPart                        == ContractPart = ... StructDefinition ...

VariableDefinition = ('var' IdentifierList | VariableDeclaration) ( '=' Expression )?

==> SimpleStatement                     == SimpleStatement = ... VariableDefinition ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

================================================================================
Level 07
--------------------------------------------------------------------------------

FunctionCall = Expression '(' FunctionCallArguments ')'

==> Expression                          == Expression = ... FunctionCall ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

================================================================================
Level 14
--------------------------------------------------------------------------------

Expression = Expression ('++' | '--')
             | NewExpression
             | IndexAccess
             | MemberAccess
             | FunctionCall
             | '(' Expression ')'
             | ('!' | '~' | 'delete' | '++' | '--' | '+' | '-') Expression
             | Expression '**' Expression
             | Expression ('*' | '/' | '%') Expression
             | Expression ('+' | '-') Expression
             | Expression ('<<' | '>>') Expression
             | Expression '&' Expression
             | Expression '^' Expression
             | Expression '|' Expression
             | Expression ('<' | '>' | '<=' | '>=') Expression
             | Expression ('==' | '!=') Expression
             | Expression '&&' Expression
             | Expression '||' Expression
             | Expression '?' Expression ':' Expression
             | Expression ('=' | '|=' | '^=' | '&=' | '<<=' | '>>=' | '+=' | '-=' | '*=' | '/=' | '%=') Expression
             | PrimaryExpression

==> ExpressionStatement                 == ExpressionStatement = Expression
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

================================================================================
Level 15
--------------------------------------------------------------------------------

ArrayTypeName = TypeName '[' Expression? ']'

==> TypeName                            == TypeName = ... ArrayTypeName ... 

ExpressionList = Expression ( ',' Expression )*

==> FunctionCallArguments               == FunctionCallArguments = ... ExpressionList? ...

IndexAccess = Expression '[' Expression? ']'

==> Expression                          == Expression = ... IndexAccess ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

IndexedParameterList = '(' ( TypeName 'INDEXED'? Identifier? (',' TypeName 'INDEXED'? Identifier?)* )? ')'

InheritanceSpecifier = UserDefinedTypeName ( '(' Expression ( ',' Expression )* ')' )?

Mapping = 'MAPPING' '(' ElementaryTypeName '=>' TypeName ')'

==> TypeName                            == TypeName = ... Mapping ... 

MemberAccess = Expression '.' Identifier

==> Expression                          == Expression = ... MemberAccess ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

NameValueList = Identifier ':' Expression ( ',' Identifier ':' Expression )*

NewExpression = 'NEW' TypeName

==> Expression                          == Expression = ... NewExpression ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

/* reduce/reduce ParameterList ::=        '(' ( TypeName            Identifier? (',' TypeName            Identifier?)* )? ')' */
ParameterList =        '(' ( TypeName            Identifier? (',' TypeName            Identifier?)* )? ')'

Return = 'RETURN' Expression?

==> Statement                           == Statement = ... Return ';' ...

StateVariableDeclaration = TypeName ( 'PUBLIC' | 'INTERNAL' | 'PRIVATE' | 'CONSTANT' )? Identifier ('=' Expression)? ';'

==> ContractPart                        == ContractPart = ... StateVariableDeclaration ...

TupleExpression = '(' ( Expression ( ',' Expression )*  )? ')'
                  | '[' ( Expression ( ',' Expression )*  )? ']'

==> Expression                          == Expression = ... PrimaryExpression ...
==> ExpressionStatement                 == ExpressionStatement = Expression
==> PrimaryExpression                   == PrimaryExpression = ... TupleExpression ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

/* reduce/reduce TypeNameList =         '(' ( TypeName (',' TypeName )* )? ')' */
TypeNameList =         '(' ( TypeName (',' TypeName )* ) ')'

UsingForDeclaration = 'USING' Identifier 'FOR' ('*' | TypeName) ';'

==> ContractPart                        == ContractPart = ... UsingForDeclaration ...

VariableDeclaration = TypeName StorageLocation? Identifier

================================================================================
Level 16
--------------------------------------------------------------------------------

EventDefinition = 'EVENT' Identifier IndexedParameterList 'ANONYMOUS'? ';'

==> ContractPart                        == ContractPart = ... EventDefinition ...

FunctionCallArguments = '{' NameValueList? '}'
                        | ExpressionList?

FunctionTypeName = 'FUNCTION' TypeNameList ( 'INTERNAL' | 'EXTERNAL' | StateMutability )*
                     ( 'RETURNS' TypeNameList )?

==> TypeName                            == TypeName = ... FunctionTypeName ... 

ModifierInvocation = Identifier ( '(' ExpressionList? ')' )?

StructDefinition = 'STRUCT' Identifier '{'
                     ( VariableDeclaration ';' (VariableDeclaration ';')* )? '}'

==> ContractPart                        == ContractPart = ... StructDefinition ...

VariableDefinition = ('var' IdentifierList | VariableDeclaration) ( '=' Expression )?

==> SimpleStatement                     == SimpleStatement = ... VariableDefinition ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

================================================================================
Level 17
--------------------------------------------------------------------------------

FunctionCall = Expression '(' FunctionCallArguments ')'

==> Expression                          == Expression = ... FunctionCall ...
==> SimpleStatement                     == SimpleStatement = ... ExpressionStatement ...
==> Statement                           == Statement = ... SimpleStatement ';' ...

================================================================================
Level 21
--------------------------------------------------------------------------------

DoWhileStatement = 'DO' Statement 'WHILE' '(' Expression ')'

==> Statement                           == Statement = ... DoWhileStatement ';' ...

ForStatement = 'FOR' '(' (SimpleStatement)? ';' (Expression)? ';' (ExpressionStatement)? ')' Statement

==> Statement                           == Statement = ... ForStatement ...

IfStatement = 'IF' '(' Expression ')' Statement ( 'ELSE' Statement )?

==> Statement                           == Statement = ... IfStatement ...

WhileStatement = 'WHILE' '(' Expression ')' Statement

==> Statement                           == Statement = ... WhileStatement ...

================================================================================
Level 22
--------------------------------------------------------------------------------

Block = '{' Statement* '}'

==> Statement                           == Statement = ... Block ...

================================================================================
Level 31
--------------------------------------------------------------------------------

DoWhileStatement = 'DO' Statement 'WHILE' '(' Expression ')'

==> Statement                           == Statement = ... DoWhileStatement ';' ...

ForStatement = 'FOR' '(' (SimpleStatement)? ';' (Expression)? ';' (ExpressionStatement)? ')' Statement

==> Statement                           == Statement = ... ForStatement ...

IfStatement = 'IF' '(' Expression ')' Statement ( 'ELSE' Statement )?

==> Statement                           == Statement = ... IfStatement ...

WhileStatement = 'WHILE' '(' Expression ')' Statement

==> Statement                           == Statement = ... WhileStatement ...

================================================================================
Level 32
--------------------------------------------------------------------------------

Block = '{' Statement* '}'

==> Statement                           == Statement = ... Block ...

================================================================================
Level 41
--------------------------------------------------------------------------------

FunctionalAssemblyExpression = Identifier '(' AssemblyItem? ( ',' AssemblyItem )* ')'

==> AssemblyItem                        == AssemblyItem = ... FunctionalAssemblyExpression ...

================================================================================
Level 42
--------------------------------------------------------------------------------

AssemblyAssignment = ( Identifier ':=' FunctionalAssemblyExpression ) | ( '=:' Identifier )

==> AssemblyItem                        == AssemblyItem = ... AssemblyAssignment ...

AssemblyLocalBinding = 'LET' Identifier ':=' FunctionalAssemblyExpression

==> AssemblyItem                        == AssemblyItem = ... AssemblyLocalBinding ...

================================================================================
Level 43
--------------------------------------------------------------------------------

InlineAssemblyBlock = '{' AssemblyItem* '}'

==> AssemblyItem                        == AssemblyItem = ... InlineAssemblyBlock ...

================================================================================
Level 44
--------------------------------------------------------------------------------

InlineAssemblyStatement = 'ASSEMBLY' StringLiteral? InlineAssemblyBlock

==> Statement                           == Statement = ... InlineAssemblyStatement ...

================================================================================
Level 51
--------------------------------------------------------------------------------

FunctionalAssemblyExpression = Identifier '(' AssemblyItem? ( ',' AssemblyItem )* ')'

==> AssemblyItem                        == AssemblyItem = ... FunctionalAssemblyExpression ...

================================================================================
Level 52
--------------------------------------------------------------------------------

AssemblyAssignment = ( Identifier ':=' FunctionalAssemblyExpression ) | ( '=:' Identifier )

==> AssemblyItem                        == AssemblyItem = ... AssemblyAssignment ...

AssemblyLocalBinding = 'LET' Identifier ':=' FunctionalAssemblyExpression

==> AssemblyItem                        == AssemblyItem = ... AssemblyLocalBinding ...

================================================================================
Level 53
--------------------------------------------------------------------------------

InlineAssemblyBlock = '{' AssemblyItem* '}'

==> AssemblyItem                        == AssemblyItem = ... InlineAssemblyBlock ...
==> Statement                           == Statement = ... InlineAssemblyBlock ...

================================================================================
Level 54
--------------------------------------------------------------------------------

InlineAssemblyStatement = 'ASSEMBLY' StringLiteral? InlineAssemblyBlock

================================================================================
Level 61
--------------------------------------------------------------------------------

Block = '{' Statement* '}'

==> Statement                           == Statement = ... Block ...

================================================================================
Level 62
--------------------------------------------------------------------------------

FunctionDefinition = 'FUNCTION' Identifier? ParameterList
                       ( ModifierInvocation | StateMutability | 'EXTERNAL' | 'PUBLIC' | 'INTERNAL' | 'PRIVATE' )*
                       ( 'RETURNS' ParameterList )? ( ';' | Block )

==> ContractPart                        == ContractPart = ... FunctionDefinition ...

ModifierDefinition = 'MODIFIER' Identifier ParameterList? Block

==> ContractPart                        == ContractPart = ... ModifierDefinition ...

================================================================================
Level 63
--------------------------------------------------------------------------------

ContractDefinition = ( 'CONTRACT' | 'LIBRARY' | 'INTERFACE' ) Identifier
                       ( 'IS' InheritanceSpecifier (',' InheritanceSpecifier )* )?
                       '{' ContractPart* '}'

================================================================================
Level 64
--------------------------------------------------------------------------------

SourceUnit = (PragmaDirective | ImportDirective | ContractDefinition)*

================================================================================
Level 99
--------------------------------------------------------------------------------

== AssemblyItem = Identifier
==              | FunctionalAssemblyExpression
==              | InlineAssemblyBlock
==              | AssemblyLocalBinding
==              | AssemblyAssignment
==              | AssemblyLabel
==              | NumberLiteral
==              | StringLiteral
==              | HexLiteral

== ContractPart = StateVariableDeclaration
==              | UsingForDeclaration
==              | StructDefinition
==              | ModifierDefinition
==              | FunctionDefinition
==              | EventDefinition
==              | EnumDefinition

/* reduce/reduce ElementaryTypeNameExpression = ElementaryTypeName */

== EnumValue = Identifier

== ExpressionStatement = Expression

== PrimaryExpression = BooleanLiteral
==                   | NumberLiteral
==                   | HexLiteral
==                   | StringLiteral
==                   | TupleExpression
/* reduce/reduce                     | Identifier                   */
/* reduce/reduce                     | ElementaryTypeNameExpression */

== SimpleStatement = VariableDefinition 
==                 | ExpressionStatement

== TypeName = ElementaryTypeName
==          | UserDefinedTypeName
==          | Mapping
==          | ArrayTypeName
==          | FunctionTypeName

/* ================================================================================================================== */
